AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"


Parameters:
  # Instance configuration
  InstanceType:
    Type: String
    Description: Instance type used for the development machine
  OperatingSystem:
    Type: String
    Description: Operating system for the development machine
    Default: ubuntu
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: SSH key to connect to the development machine
  
  # IAM configuration
  IamRoleName:
    Type: String
    Description: |
      Name of the IAM Role for the EC2 instance. If  this parameter is empty,
      the instance will not launch with an instance profile.
    Default: ""

  # DNS configuration
  HostedZoneId:
    Type: String
    Description: |
      Hosted Zone ID if you want to use custom domains. If this parameter is
      empty, it will default to the default public DNS name of the EC2
      instance.
    Default: ""
  DomainName:
    Type: String
    Description: |
      Domain name to use for the Hosted Zone. If the HostedZoneId parameter is
      an empty string, this will use the default DNS name of the EC2 instance.
    Default: ""


Mappings:
  ImageId:
    # Taken from https://cloud-images.ubuntu.com/locator/ec2/
    eu-north-1:
      ubuntu: ami-0b321105d199c4774
    eu-west-1:
      ubuntu: ami-0665161784d935578
    us-east-1:
      ubuntu: ami-0b6b1f8f449568786
    us-west-1:
      ubuntu: ami-0bad1f1c6d0baa1c7
    us-west-2:
      ubuntu: ami-02c8040256f30fb45


Globals:
  Function:
    Runtime: python3.8
    Handler: main.handler
    Timeout: 60
    Tracing: Active
  Api:
    TracingEnabled: true



Conditions:
  HasHostedZone: !Not [ !Equals [ "", !Ref HostedZoneId ] ]
  HasIamRole: !Not [ !Equals [ "", !Ref IamRoleName ] ]


Resources:
  ####################
  # INSTANCE PROFILE #
  ####################

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: HasIamRole
    Properties:
      Roles:
        - !Ref IamRoleName

  #################
  # SPOT INSTANCE #
  #################

  SpotInstanceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/spot_instance/
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ec2:RunInstances
                - ec2:TerminateInstances
                - ec2:AssociateIamInstanceProfile
                - ec2:DisassociateIamInstanceProfile
                - ec2:ReplaceIamInstanceProfileAssociation
              Resource: "*"
            - Effect: Allow
              Action: iam:PassRole
              Resource: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${IamRoleName}"

  SpotInstance:
    Type: Custom::SpotInstance
    Properties:
      ServiceToken: !GetAtt SpotInstanceFunction.Arn
      ImageId: !FindInMap [ImageId, !Ref "AWS::Region", !Ref OperatingSystem]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      InstanceProfileArn: !If [ "HasIamRole", !GetAtt InstanceProfile.Arn, !Ref AWS::NoValue ]
      SecurityGroupId: !GetAtt SecurityGroup.GroupId
      UserData: |
        #!/bin/bash

        # Update packages
        apt-get update -y

        # Add SSH connection monitor
        cat > /root/sshmonitor.py << EOF
        #!/usr/bin/env python3
        import subprocess, time
        SLEEP_DURATION = 30
        MAX_COUNT = 10
        def main():
            count = 0
            while count < MAX_COUNT:
                process = subprocess.run(["ps", "-ef"], stdout=subprocess.PIPE, encoding="utf-8")
                if "sshd: ubuntu" in process.stdout:
                    print("User active")
                    count = 0
                else: count += 1
                time.sleep(SLEEP_DURATION)
            print("System shutting down")
            subprocess.run(["shutdown", "-h", "now"])
        if __name__ == "__main__": main()
        EOF
        chmod 700 /root/sshmonitor.py
        
        cat > /etc/systemd/system/sshmonitor.service << EOF
        [Unit]
        Description=SSH Activity Monitor
        After=ssh.service
        
        [Service]
        ExecStart=/root/sshmonitor.py
        Restart=on-failure
        
        [Install]
        WantedBy=multi-user.target
        EOF
        systemctl enable sshmonitor.service

        # Shutdown the instance
        shutdown -h now
    
  ##################
  # SECURITY GROUP #
  ##################

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: devbox security group

  #################
  # API FUNCTIONS #
  #################

  StartFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api_start/
      Environment:
        Variables:
          INSTANCE_ID: !Ref SpotInstance
          SECURITY_GROUP_ID: !GetAtt SecurityGroup.GroupId
          DOMAIN_NAME: !Ref DomainName
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ec2:DescribeInstances
                - ec2:DescribeSecurityGroups
              Resource: "*"
            - Effect: Allow
              Action:
                - ec2:StartInstances
              Resource: !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/${SpotInstance}"
            - Effect: Allow
              Action:
                - ec2:AuthorizeSecurityGroupIngress
              Resource: !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${SecurityGroup.GroupId}"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: PUT
            Auth:
              Authorizer: AWS_IAM

  StatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api_status/
      Environment:
        Variables:
          INSTANCE_ID: !Ref SpotInstance
          DOMAIN_NAME: !Ref DomainName
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ec2:DescribeInstances
              Resource: "*"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
            Auth:
              Authorizer: AWS_IAM

  ###################
  # EVENT FUNCTIONS #
  ###################

  OnRunFunction:
    # When the EC2 instance changes to the 'running' state
    Type: AWS::Serverless::Function
    # No need to deploy this function when there are no HostedZoneId
    Condition: HasHostedZone
    Properties:
      CodeUri: src/on_run/
      Environment:
        Variables:
          HOSTED_ZONE_ID: !Ref HostedZoneId
          DOMAIN_NAME: !Ref DomainName
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ec2:DescribeInstances
              Resource: "*"
            - Effect: Allow
              Action: 
                - route53:ChangeResourceRecordSets
              Resource: !Sub "arn:${AWS::Partition}:route53:::hostedzone/${HostedZoneId}"
      Events:
        InstanceRunning:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - aws.ec2
              detail-type:
                - "EC2 Instance State-change Notification"
              detail:
                instance-id:
                  - !Ref SpotInstance
                state:
                  - running


  OnStopFunction:
    # When the EC2 instance changes to the 'stopped' state
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/on_stop/
      Environment:
        Variables:
          SECURITY_GROUP_ID: !GetAtt SecurityGroup.GroupId
          HOSTED_ZONE_ID: !Ref HostedZoneId
          DOMAIN_NAME: !Ref DomainName
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ec2:DescribeSecurityGroups
              Resource: "*"
            - Effect: Allow
              Action:
                - ec2:RevokeSecurityGroupIngress
              Resource: !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${SecurityGroup.GroupId}"
            - Effect: Allow
              Action:
                - route53:ListResourceRecordSets
                - route53:ChangeResourceRecordSets
              # If there are no HostedZoneId, this will not grant any permission
              Resource: !Sub "arn:${AWS::Partition}:route53:::hostedzone/${HostedZoneId}"
      Events:
        InstanceStopped:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - aws.ec2
              detail-type:
                - "EC2 Instance State-change Notification"
              detail:
                instance-id:
                  - !Ref SpotInstance
                state:
                  - stopped


Outputs:
  ApiEndpoint:
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: Instance Configuration
        Parameters:
          - InstanceType
          - OperatingSystem
          - KeyName
      - Label: IAM Configuration
        Parameters:
          - IamRoleName
      - Label: DNS Configuration
        Parameters:
          - HostedZoneId
          - DomainName
    ParameterLabels:
      InstanceType: Instance Type
      OperatingSystem: Operating System
      KeyName: Key Name
      IamRoleName: IAM Role Name
      HostedZoneId: Route53 Zone Id
      DomainName: Instance Domain Name