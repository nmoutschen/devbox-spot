AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"


Parameters:
  DomainName:
    Type: String
    Description: Domain name used for the development machine
  InstanceType:
    Type: String
    Description: Instance type used for the development machine
  OperatingSystem:
    Type: String
    Description: Operating system for the development machine
    Default: ubuntu-19.10
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: SSH key to connect to the development machine


Mappings:
  ImageId:
    ubuntu-19.10:
      # Taken from https://cloud-images.ubuntu.com/locator/ec2/
      eu-north-1: ami-0b321105d199c4774
      eu-west-1: ami-0665161784d935578
      us-east-1: ami-0b6b1f8f449568786
      us-west-1: ami-0bad1f1c6d0baa1c7
      us-west-2: ami-02c8040256f30fb45


Globals:
  Function:
    # Cannot use python3.8, as that runtime does not support InlineCode.
    Runtime: python3.7
    Handler: index.handler
    Timeout: 60


Resources:
  SpotInstanceFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        import boto3, cfnresponse
        ec2 = boto3.client("ec2")

        def handler(event, context):
            response_data = {}
            try:
                instance = ec2.run_instances(
                    ImageId=event["ResourceProperties"]["ImageId"],
                    InstanceType=event["ResourceProperties"]["InstanceType"],
                    KeyName=event["ResourceProperties"]["KeyName"],
                    SecurityGroupIds=[event["ResourceProperties"]["SecurityGroupId"]],
                    UserData=event["ResourceProperties"].get("UserData"),
                    InstanceInitiatedShutdownBehavior="stop",
                    InstanceMarketOptions={
                        "MarketType": "Spot",
                        "SpotOptions": {
                            "SpotInstanceType": "persistent",
                            "InstanceInterruptionBehavior": "stop"
                        }
                    },
                    MinCount=1,
                    MaxCount=1
                )
                instance_id = instance["Instances"][0]["InstanceId"]
                cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, instance_id)
            except:
                cfnresponse.send(event, context, cfnresponse.FAILED, response_data, "")
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: ec2:RunInstances
              Resource: "*"

  SpotInstance:
    Type: Custom::SpotInstance
    Properties:
      ServiceToken: !GetAtt SpotInstanceFunction.Arn
      ImageId: !FindInMap [ImageId, !Ref OperatingSystem, !Ref AWS::Region]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupId: !Ref SecurityGroup
      UserData: |
        #!/bin/bash

        apt-get update -y
        shutdown -h now
    
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup

  StartFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        import json, os, boto3
        ec2 = boto3.resource("ec2")
        def handler(event, _):
            ip = event["requestContext"]["identity"]["sourceIp"]
            # Authorize the caller to send ICMP & SSH requests
            sg = ec2.SecurityGroup(os.environ["SECURITY_GROUP_ID"])
            sg.authorize_ingress(
                CidrIp="{}/32".format(ip),
                IpProtocol="icmp",
                FromPort=-1,
                ToPort=-1
            )
            sg.authorize_ingress(
                CidrIp="{}/32".format(ip),
                IpProtocol="tcp",
                FromPort=22,
                ToPort=22
            )
            # Start the instance
            instance = ec2.Instance(os.environ["INSTANCE_ID"])
            instance.start()
            return {
                "statusCode": 200,
                "body": json.dumps({
                    "state": instance.state,
                    "dns": instance.public_dns_name
                })
            }
      Environment:
        Variables:
          INSTANCE_ID: !Ref SpotInstance
          SECURITY_GROUP_ID: !Ref SecurityGroup
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ec2:DescribeInstances
                - ec2:StartInstances
              Resource: !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/${SpotInstance}"
            - Effect: Allow
              Action:
                - ec2:DescribeSecurityGroups
                - ec2:AuthorizeSecurityGroupIngress
              Resource: !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${SecurityGroup}"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: PUT
            Auth:
              Authorizer: AWS_IAM

  StatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        import os, boto3
        ec2 = boto3.resource("ec2")
        def handler(event, _):
            # Return the instance status
            instance = ec2.Instance(os.environ["INSTANCE_ID"])
            return {
                "statusCode": 200,
                "body": json.dumps({
                    "state": instance.state,
                    "dns": instance.public_dns_name
                })
            }
      Environment:
        Variables:
          INSTANCE_ID: !Ref SpotInstance
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ec2:DescribeInstances
              Resource: !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/${SpotInstance}"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
            Auth:
              Authorizer: AWS_IAM


  StopFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        import os, boto3
        ec2 = boto3.resource("ec2")
        def handler(event, _):
          # Remove all permissions from SecurityGroup
          sg = ec2.SecurityGroup(os.environ["SECURITY_GROUP_ID"])
          sg.revoke_ingress(IpPermissions=sg.ip_permissions)
      Environment:
        Variables:
          SECURITY_GROUP_ID: !Ref SecurityGroup
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ec2:DescribeSecurityGroups
                - ec2:RevokeSecurityGroupIngress
              Resource: !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${SecurityGroup}"
      Events:
        InstanceStopped:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - aws.ec2
              detail-type:
                - "EC2 Instance State-change Notification"
              detail:
                instance-id:
                  - !Ref SpotInstance
                state:
                  - stopped